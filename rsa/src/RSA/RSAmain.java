package RSA;

import java.math.BigInteger;

public class RSAmain {
	
	public static void main(String[]args)
	{
		//prime1str and prime2str can be changed to any prime numbers
		String prime1Str ="13753723974785997216585623371079068381476567097038552875476921804869907078046881887329870686960001280645443896169242916112818140459172894243901644121383493605114272433966208262026647724636381146948786403049998571559627641965544918957785388032192075546115965903403774523313005046802166339591159748189959050908030314572058501049464991511750383526024274251506392519898020476053435413571593";
		String prime2Str="7334771380290427322977325051091461104993620975649013011565671390743006477358353004126692272736178901847056264405611134347567081241430133468322908654159686726207585364569567126950709385612422180345706676869806916181740733107542676938747157268785667435560165680071175083044470856441896655908558505345935555955974265258304204357687761416835866679188622314675495048470066158286852092564933";
		BigInteger prime1= new BigInteger(prime1Str);
		BigInteger prime2= new BigInteger(prime2Str);
		keyGenerator kg = new keyGenerator(prime1,prime2);
		kg.generate();
		myPublicKey pub =kg.getPublicKey();
		myPrivateKey pri = kg.getPrivateKey();
		
		//dataStr must be under "n"
		
		//String dataStr="13753723974785997216585623371079068381476567097038552875476921804869907078046881887329870686960001280645443896169242916112818140459172894243901644121383493605114272433966208262026647724636381146948786403049998571559627641965544918957785388032192075546115965903403774523313005046802166339591159748189959050908030314572058501049464991511750383526024274251506392519898020476053435413571593";
		//BigInteger data = new BigInteger(dataStr);
		
		encrypt eng = new encrypt("Ayy lmao");
		BigInteger[] encrypted = eng.encryptData(pub);
		
		System.out.print("Encrypted: ");
		for(BigInteger x: encrypted)
		{
			System.out.println(x);
		}
		
		System.out.println("");
		decrypt decry = new decrypt(encrypted,pri);
		String decrypted = decry.decryptData();
		System.out.println("Decrypted: "+decrypted);
		
		String a ="This is my message";
		signature sig = new signature(pri,a);
		BigInteger signature = sig.generateSignature();
		System.out.println("Signature: "+signature);
		
		verifySignature verify = new verifySignature(signature,pub,a);
		if(verify.isSignatureAuth())
		{
			System.out.println("The signature is authentic");
		}
		else
		{
			System.out.println("The signature is NOT authentic");
		}
		
	}

}
